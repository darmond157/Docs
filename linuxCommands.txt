type <command>
which <command>
whatis <command>
man <command>
info <command>
apropos <s.th>
stat <filename>
ln -s original_file soft_link //pointer from soft_link_file to original_file
ln original_file soft_link //pointer from hard_link_file to original_file
ls -i soft_or_hard_link_file original_file //checks inode
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
sudo -i //access root
su (optional:- <user>) (default:root)
cat /etc/passwd => username:x:userId:groupId:a comment:home path:default shell //x means the user's password is encrypted and stored in the file /etc/shadow.
(as root) useradd -m -u <uid> -c <comment> -s <shell_path> <username>
tail -n <number> <filename> //gives last <number> lines of file
passwd <user> //change password
usermod -u <userid> -s <shell> username
userdel -r <username>
cat /etc/group => groupName:x:groupId:usernameOfGroupMembers //x means the group password is encrypted and stored in the file /etc/gshadow.
groupadd (optional: --gid 888) <groupName> //create new group
groupdel <groupName>
usermod -aG <groupName> <userName>
chown <username>:<groupName> fileName
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-rwxrwxrwx => read/write/execute for owner/group/others || first character is file type =>
1) - for regular files
2) d for directories
3) l for soft links
4) b for block devices
5) c for character devices
chmod ====>
chmod o+w <fileName> => write access for others
chmod a+x <fileName> => execute access for all
chmod a-x <fileName> => remove execute access for all
chmod ug=rwx <fileName> => This will give the user owner and group owner full permissions.
chmod o-rw <fileName> => This will remove read and write permissions from others.
chmod a= <fileName> => This will give zero (no) permissions to everyone.
chmod go= <fileName> => This will give zero permissions to the group owner and others.
chmod u+rx <fileName> => This will add read and execute permissions to the user owner.
access numbers ====> 7: read + write + execute || 6: read + write || 4: read || 2: write || 1: execute || 0: no permission
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
** piping in linux gives us access to pass output of a command to input of another command. **
lscpu | head -n 4 | tail -n 1 => gives us the fifth line of that fileName by passing 5 first lines of file then returning first line from bottom.
** we can use greater-than sign ( > ) to redirect output from terminal to a file and ( >> ) to append another text; not rewriting that in a file. ** ===>
echo "hello" > hi.txt
echo date >> date.txt
** using > means 1> which is output || using 2> will put errors is a specific file ** ===>
cat exist.txt notExist.txt 2> err.txt //will put only " No such file or directory " in err.txt
if you want to redirect both the standard output and the error to the same file ===> cat exist.txt notExist.txt > all.txt 2>&1
cat 1.txt 2.txt 3.txt 4.txt 2> /dev/null || we can think of /dev/null to be garbage collector.
read variable < example.txt // will redirect standard input to come from a file
read variable // will put users input in variable ehich can be used with "echo $variable"
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
diff <file1> <file2> //returns differences between two files.
du -b <fileName> //disk usage of that file. each word is one byte. so it returns how many bytes or words it has.
du -h <fileName> //in human-readable format
wc option <fileName> //word count: option can be -l -w -c  => line/word/character
file <something> //returns filetype of that => dir, ascii file, ...
sort -r(reverse) <fileName>
uniq <fileName> //shows lines without repeat.
grep -i(case-insensitive) <something> <fileName> //searches for something in a file.
sed -i(optional) 's/<source>/<target>'
cat <fileName> | tr [:lower:] [:upper:] //translates lowercases to uppercases but does not change source file. we can use (> <fileName>) at end to save translated data.
cat <fileName> | tr -d ' ' //deletes all spaces
cut -d ' ' -f1 <fileName> //returns first part of slicing with white space. it can be -f2 -f3 -f4 -f2,3 -f1,3 ...
awk '{print $1}' <fileName> //returns first word on each line in a file.
awk '{print $1,$2}'
awk '/red/{print}' <fileName> //searches for 'red' like grep command.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Wildcard Characaters ===>
* Matches any character(s).
? Matches any single character.
[characters] Matches the characters that are members of the set characters.
[!characters] is negation of [characters]. For example, [!abc] will match any character that is not a, b, or c.
[[:class:]] Matches any character that is a member of the character class.
[:alnum:] Represents all the alphanumeric letters, that is, any letter or number.
[:alpha:] Represents all alphabetic letters, that is, any letter.
[:digit:] Represents all digits, that is, any number.
[:lower:] Represents any lower case letter.
[:upper:] Represents any upper case letter.
e.g =>
ls -l *.txt
ls -l f*
ls -l ???.txt
ls -l [af]*
ls -l [!f]*.txt
ls -l *[[:upper:]]
ls -l [[:digit:]]*
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Regex ===>
* Matches zero or more of the preceding characters or expressions.
+ Matches one or more of the preceding characters or expressions.
. Matches any single character. Same as the ? wildcard.
^ Matches the following expression at the beginning of the line. For example, ^dog will match all lines that begin with the word dog.
$ Matches the preceding expression at the end of the line. For example, bird$ will match all lines that end with the word bird.
\ Used as an escape character to match a special character following the backslash. Forexample, \* matches a star (asterisk).
[characters] Matches the characters that are members of the set characters. For example, [abc] will match the characters a,b, or c.
[^character] Matches any character that is not a member of the set characters. It is basically the negation of [characters]. For example, [!abc] will match any character that is not a,b, or c.
{x,y} Matches x to y occurrences of the preceding expression.
{x} Matches exactly x occurrences of the preceding expression.
{x,} Matches x or more occurrences of the preceding expression.
{,x} Matches no more than x occurrences of the preceding expression.
egrep = grep -E //looking for regex in a file
e.g =>
egrep d*g <fileName> //g, dog, dg, ddg, dddg, ...
egrep d+g <fileName> //dg, ddg, dddg, ...
egrep "\*" <fileName>
egrep ^man <fileName>
egrep m.n <fileName>
egrep man$ <fileName>
egrep "[[:digit:]]{1,}" <fileName>
egrep "[[:digit:]]{3}-[[:digit:]]{3}-[[:digit:]]{3}" <fileName>
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
updatedb
locate <fileName>
find <dir> (-name/-iname <fileName>) (-type <fileType: d,f,...>) (-size 6c :du -h command) (-exec ls -l/rm {} + :{} + references all the files that are found in the find results)
e.g =>
find / -size +100M //size more than 100 megabytes.
find / -size -5c //size less than 5 bytes.
find / -size +50M -size -100M //find all the files that are bigger than 50 MB, but smaller than 100 MB.
find / -size +1G //Will search for all the files that are bigger than 1 GB.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
apt-get download <packageName> //package.deb will store in /tmp (cd as root)
dpkg -c <package.deb> //list the files inside that .deb package.
dpkg -i <package.deb> //installs the downloaded package.
apt-get remove <packageName> //removes (uninstalls) a package, but it doesnâ€™t remove the package configuration files.
apt-get purge <packageName> //remove the package along with its configuration files.
apt-cache (-n) search <keyword> //searches for a package in repo. (-n for exact search of that word).
apt-get install <packageName>
apt-cache show <packageName> //show package information.
apt-cache depends <packageName> //show package dependencies.
dpkg -l //list all the packages that are installed on system.
apt-cache pkgnames //lists all packages that are available to install.
apt-cache pkgnames | wc -l //count all packages
** repositories(sources) system used to obtain all apt-cache packages are listed in /etc/apt/source.list **
apt-cache policy //shows all enabled repositories on system.
apt-cache policy <packageName> //shows which repository provides a specific package.
apt-get install --only-upgrade <packageName> //upgrades a package.
** order matters; that is, you need to run the apt-get update command before you run the apt-get upgrade command. this action is called patching the system.**
apt-get update //updates the list of available packages and their versions.
apt-get upgrade //upgrades all the installed packages on system.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
