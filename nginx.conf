http {
  
	# handling css or other types
	include mime.types

	# define servers (docker containers) for load balancing
	upstream backendserver {
		server 127.0.0.1:1111;
		server 127.0.0.1:2222;
		server 127.0.0.1:3333;
		server 127.0.0.1:4444;
	}

	# goes to root and serves index.html
	server {
		listen 8080;
		root /home/darmond157;
	}

	# redirects to new route but does not change the route, but just renders new route ...
	rewrite ^/number/(\w+) /count/$1;

	# round robin for load balancing ...
	location / {
		proxy_pass http://backendserver;
	}

	# we can use regular expressions ...
	location ~* /count/[0-9] {
		root /home/darmond157;
		try_files /index.html =404;
	}

	# goes to darmond157/fruits folder and serve the index.html file and appends /fruits at the end!
	location /fruits {
		root /home/darmond157
	}

	# goes to darmond157/fruits folder and serve the index.html file and does not append /carbs at the end!
	location /carbs {
		alias /home/darmond157/fruits;
	}

	# goes to darmond157/vegetables folder and serve the veggies.html file because we don't have index.html file!
	# if that files does not exists, it serves index.html at the Root of project. and if it does not exists, it returns 404!
	location /vegetables {
		root /home/darmond157;
		try_files /vegetables/veggies.html /index.html =404;
	}

	# redirect to new route
	location /crops {
		return 307 /fruits
	}
}

events {}
